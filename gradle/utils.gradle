
// Helper Methods
//----------------------------------------------------------------------------------------------------------------------

ext.getActualVersion = { Project project ->
    def vs = getActualVersionArray(project)
    def major = vs[0] as int
    def minor = vs[1] as int
    def patch = vs[2] as int
    return "$major.$minor.$patch"
}

ext.getActualVersionArray = { Project project ->
    def v = project.version.toString()
    if(v.endsWith("-SNAPSHOT")) {
        v = v.replaceAll("-SNAPSHOT", "")
        def vs = v.split("\\.")
        def major = (vs[0] as int)
        def minor = (vs[1] as int)
        def patch = ((vs[2] as int) > 0) ? (vs[2] as int) - 1 : 0
        return [major, minor, patch]
    }
    else {
        def vs = v.split("\\.")
        def major = (vs[0] as int)
        def minor = (vs[1] as int)
        def patch = (vs[2] as int)
        return [major, minor, patch]
    }
}

ext.getBaseUrl = { Project project ->
    def url = null
    if (project.hasProperty('env') && project.property('env') == 'prod') {

        if(System.getenv('CONTEXT') == "branch-deploy") {
            // branch deploys
            url = System.getenv('DEPLOY_PRIME_URL') // Netlify deploy preview URL
        }
        else if(Boolean.parseBoolean(System.getenv('PULL_REQUEST'))) {
            // PR deploy previews
            url = System.getenv('DEPLOY_URL') // Netlify deploy preview URL
        }
        else if(System.getenv('URL')) {
            // production deploys
            url = System.getenv('URL')
        }
    }
    else {
        url = 'http://localhost:8080' // local development URL
    }

    if(!url) {
        url = "https://orchid.netlify.com"
    }

    return url
}

ext.getEnvName = { Project project ->
    if (project.hasProperty('env')) {
        return project.property('env')
    }
    else {
        return 'debug'
    }
}

ext.getGithubToken = { Project project ->
    return project.hasProperty('github_token') ? project.property('github_token') : System.getenv('GITHUB_TOKEN')
}

ext.getChangelogFileName = {
    def vs = getActualVersionArray(project)
    def major = vs[0] as int
    def minor = vs[1] as int
    def patch = vs[2] as int
    return "$major.$minor/${major}.${minor}.${patch}.md"
}

ext.getChangelogFile = {
    def versionFilename = getChangelogFileName(project)
    def fullVersionFilename = "${project(':OrchidCore').projectDir}/src/orchid/resources/changelog/$versionFilename"
    return rootProject.file(fullVersionFilename)
}

// Helper Properties
//----------------------------------------------------------------------------------------------------------------------

ext.groupsScript = "$rootDir/gradle/groups"
ext.actionsScript = "$rootDir/gradle/actions"